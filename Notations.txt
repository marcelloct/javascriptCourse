------------------------------------------------------ Section 1: Fundamentals ----------------------------------------------------

Javascript: High-Level, Object_oriented, Multi-paradigm programming language
programming language - instruct computer to do things
High-Level - we don't have to worry about complex stuff like memory management
Object_oriented - based on objects, for storing most kinds of data
Multi-paradigm - we can use different styles of programming

variable - 'box with a value'

expression - piece of code that produce a value - 3 + 4, 1991, true && false, ...
statement -  bigger piece of code that is executed and which does not produce a value on itself / produce actions - if/else, switch, ...

data types -> Objects and primitives

primitive = number, string, boolean, undefined, null, symbol, bigint

operators ->
math operator - let x = 10 + 5
assignment operator - x = 10, x += 10, x++
comparison operator - x > y, x <= y
equality operators - x == y, x === y, x !== y, x != y
logic operators - &&, ||, !
conditional operator - x >= 18 ? console.log() : console.log()

operators precedence - https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Operators/Operator_Precedence

control structures: if/else, switch, loops

type conversion - Number(), String()
type coercion - 'I am ' + 23 + ' years old', '23' - '10' - 3

falsy values: 0, '', undefined, null, NaN

strict mode - avoid accidental errors - 'use strict'; in the beggining of the file

function declaration - can be used before it's declared
function expression - essentially a fuction value stored ins a variable
arrow function - great for quick oneline functions, don't accept 'this.' keyword

data structures - arrays, objects

DOM (Document Object Model): Structured representation of HTML Documents. Allows Javascript to access HTML Elements and Stykles to manipulate them.

DOM is not a part of the Javascript language
DOM and DOM Methods -> Web APIs

------------------------------------------------------ Section 8: Behind the Scenes ----------------------------------------------------

JS Engine - Program that executes javascript code (browser)
Every browser has it own JS engine
Most weel known is V8 Engine (google)  used in Chrome, NodeJS (not browser)
All JS Engine has call stack and heap
Call stack - where our code is executed using execution context
Hea- where object are stocked, stores all the objects that our application needs

compilation vs intepretation
Compilation - Entire code is converted into machine code at once, and writen to a binary file that can be executed by a computer
Interpretation - Interpreter runs through the source code and executes it line by line

Javascript is interpreter language 
interpreter languages are much slower than compiled languages

Modern Javascript now use a mix between compilation and interpretation, which is called just-in-time compilation

Just-in-time (JIT) compilation - Entire code is converted into machine code at once, then executed immediately

runtime in the browser > JS Engine (HEAP / CALL STACK) + WEB API's (DOM / Timers / Fetch API) + Callback Queue (click / timer / data)
WEB API's - Functionalities provided to the engine, accessible on window object

Arrow functions don't have this keyword an arguments object

var is function-scoped
const and let are block-scoped

execution context - variable environment, scope chain, this keyword

